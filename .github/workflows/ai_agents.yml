name: AI Agents Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        default: 'c120176'

permissions:
  contents: read
  pull-requests: write

jobs:
  run-ai-agents:
    runs-on: ubuntu-latest

    env:
      GROQ_API_ENDPOINT: ${{ secrets.GROQ_API_ENDPOINT }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.13.0
      uses: actions/setup-python@v4
      with:
        python-version: 3.13.0

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check and Create PR if needed
      run: |
        python -c "
        from github import Github
        from github.GithubException import UnknownObjectException
        import os

        try:
            pr_number = '${{ env.PR_NUMBER || github.event.inputs.pr_number || github.event.pull_request.number }}'
            # Remove 'c' prefix if present
            if pr_number.startswith('c'):
                pr_number = pr_number[1:]

            github_client = Github(os.environ['GITHUB_TOKEN'])
            repo = github_client.get_repo('${{ github.repository }}')

            try:
                # Check if PR exists
                repo.get_pull(int(pr_number))
                print(f'✅ Pull request #{pr_number} exists. Proceeding with agents.')
            except UnknownObjectException:
                print(f'⚠️ Pull request #{pr_number} not found. Creating a sample PR for testing.')

                # Create a new branch
                main_branch = repo.get_branch('main')
                branch_name = f'test-pr-{pr_number}'

                try:
                    # Try to get the branch first to see if it exists
                    repo.get_branch(branch_name)
                    print(f'Branch {branch_name} already exists.')
                except:
                    # Create the branch if it doesn't exist
                    repo.create_git_ref(f'refs/heads/{branch_name}', main_branch.commit.sha)
                    print(f'Created branch {branch_name}')

                # Create a sample file change
                try:
                    # Try to update the file if it exists
                    contents = repo.get_contents('test-file.md', ref=branch_name)
                    repo.update_file(
                        contents.path,
                        f'Update test file for PR #{pr_number}',
                        f'# Test File for PR #{pr_number}\n\nThis file was created automatically to test the AI agents workflow.',
                        contents.sha,
                        branch=branch_name
                    )
                except:
                    # Create the file if it doesn't exist
                    repo.create_file(
                        'test-file.md',
                        f'Create test file for PR #{pr_number}',
                        f'# Test File for PR #{pr_number}\n\nThis file was created automatically to test the AI agents workflow.',
                        branch=branch_name
                    )

                # Create the PR
                try:
                    pr = repo.create_pull(
                        title=f'Test PR #{pr_number}',
                        body='This is a test PR created automatically to test the AI agents workflow.',
                        head=branch_name,
                        base='main'
                    )
                    print(f'Created PR #{pr.number}')

                    # Update the PR number for subsequent steps
                    with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                        env_file.write(f'PR_NUMBER={pr.number}\\n')
                except Exception as e:
                    print(f'Error creating PR: {str(e)}')
        except Exception as e:
            print(f'Error in PR check/creation: {str(e)}')
        "

    - name: Run Build Predictor Agent
      run: |
        python -c "
        from agents.build_predictor_agent import BuildPredictorAgent, BuildPredictorConfig
        import os

        try:
            pr_number = '${{ env.PR_NUMBER || github.event.inputs.pr_number || github.event.pull_request.number }}'
            # Remove 'c' prefix if present
            if pr_number.startswith('c'):
                pr_number = pr_number[1:]

            agent = BuildPredictorAgent(BuildPredictorConfig(
                groq_api_key=os.environ['GROQ_API_KEY']
            ))
            result = agent.predict_build_failure({'pr_number': pr_number})
            print(result)
        except Exception as e:
            print(f'Error in Build Predictor Agent: {str(e)}')
        "

    - name: Run Code Review Agent
      run: |
        python -c "
        from agents.code_review_agent import CodeReviewAgent, CodeReviewConfig
        import os
        from github import Github
        from github.GithubException import UnknownObjectException

        try:
            pr_number = '${{ env.PR_NUMBER || github.event.inputs.pr_number || github.event.pull_request.number }}'
            # Remove 'c' prefix if present
            if pr_number.startswith('c'):
                pr_number = pr_number[1:]

            # First check if the PR exists
            github_client = Github(os.environ['GITHUB_TOKEN'])
            repo = github_client.get_repo('${{ github.repository }}')

            try:
                # Try to get the PR to verify it exists
                repo.get_pull(int(pr_number))

                # If we get here, PR exists, so run the agent
                agent = CodeReviewAgent(CodeReviewConfig(
                    groq_api_endpoint=os.environ['GROQ_API_ENDPOINT'],
                    groq_api_key=os.environ['GROQ_API_KEY'],
                    github_token=os.environ['GITHUB_TOKEN'],
                    repo_name='${{ github.repository }}',
                    pull_request_number=int(pr_number)
                ))
                agent.run()
            except UnknownObjectException:
                print(f'⚠️ Pull request #{pr_number} not found in repository. Skipping code review.')
                # Create an issue to notify about the missing PR
                repo.create_issue(
                    title=f'Code Review Agent: PR #{pr_number} not found',
                    body=f'The Code Review Agent was triggered for PR #{pr_number}, but this PR does not exist in the repository.'
                )
        except Exception as e:
            print(f'Error in Code Review Agent: {str(e)}')
        "

    - name: Run Chat Agent
      run: |
        python -c "
        from agents.chat_agent import ChatAgent, ChatAgentConfig
        import os
        from github import Github
        from github.GithubException import UnknownObjectException

        try:
            pr_number = '${{ env.PR_NUMBER || github.event.inputs.pr_number || github.event.pull_request.number }}'
            # Remove 'c' prefix if present
            if pr_number.startswith('c'):
                pr_number = pr_number[1:]

            # First check if the PR exists
            github_client = Github(os.environ['GITHUB_TOKEN'])
            repo = github_client.get_repo('${{ github.repository }}')

            try:
                # Try to get the PR to verify it exists
                repo.get_pull(int(pr_number))

                # If we get here, PR exists, so run the agent
                agent = ChatAgent(ChatAgentConfig(
                    chat_model_id='llama3-8b-8192',
                    groq_api_endpoint=os.environ['GROQ_API_ENDPOINT'],
                    groq_api_key=os.environ['GROQ_API_KEY'],
                    github_token=os.environ['GITHUB_TOKEN'],
                    repo_name='${{ github.repository }}',
                    pull_request_number=int(pr_number)
                ))
                agent.run()
            except UnknownObjectException:
                print(f'⚠️ Pull request #{pr_number} not found in repository. Skipping chat agent.')
                # We don't create another issue since the Code Review Agent already did

        except Exception as e:
            print(f'Error in Chat Agent: {str(e)}')
        "